// @ts-nocheck
/**
 * This file is generated by 'file2variable-cli'
 * It is not mean to be edited by hand
 */
import { createBlock as _createBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, renderList as _renderList, renderSlot as _renderSlot, resolveComponent as _resolveComponent, resolveDynamicComponent as _resolveDynamicComponent, toDisplayString as _toDisplayString } from 'vue'
// tslint:disable
/* eslint-disable */

export function nodeTemplateHtml(_ctx, _cache) {
  const _component_node = _resolveComponent("node")

  return (_openBlock(), _createBlock("li", {
    role: "treeitem",
    class: _ctx.nodeClassName,
    id: _ctx.id,
    onDragstart: _cache[9] || (_cache[9] = $event => (_ctx.ondragstart($event))),
    onDragend: _cache[10] || (_cache[10] = $event => (_ctx.ondragend($event))),
    onDragover: _cache[11] || (_cache[11] = $event => (_ctx.ondragover($event))),
    onDragenter: _cache[12] || (_cache[12] = $event => (_ctx.ondragenter($event))),
    onDragleave: _cache[13] || (_cache[13] = $event => (_ctx.ondragleave($event))),
    onDrop: _cache[14] || (_cache[14] = $event => (_ctx.ondrop($event)))
  }, [
    _createVNode("i", {
      class: _ctx.oclClassName,
      role: "presentation",
      onClick: _cache[1] || (_cache[1] = $event => (_ctx.ontoggle()))
    }, null, 2 /* CLASS */),
    _createVNode("a", {
      class: _ctx.anchorClassName,
      href: "javascript:void(0)",
      draggable: _ctx.draggable,
      onClick: _cache[2] || (_cache[2] = $event => (_ctx.onchange())),
      onDblclick: _cache[3] || (_cache[3] = $event => (_ctx.ontoggle())),
      onMouseenter: _cache[4] || (_cache[4] = $event => (_ctx.hover(true))),
      onMouseleave: _cache[5] || (_cache[5] = $event => (_ctx.hover(false))),
      onContextmenu: _cache[6] || (_cache[6] = $event => (_ctx.oncontextmenu($event))),
      "data-path": _ctx.pathString
    }, [
      (_ctx.checkbox)
        ? (_openBlock(), _createBlock("i", {
            key: 0,
            class: _ctx.checkboxClassName,
            role: "presentation",
            style: {"margin-left":"-5px","margin-right":"-1px"}
          }, null, 2 /* CLASS */))
        : _createCommentVNode("v-if", true),
      (_ctx.data.icon !== false)
        ? (_openBlock(), _createBlock("i", {
            key: 1,
            class: _ctx.iconClassName,
            role: "presentation",
            style: {"margin-left":"-5px","margin-right":"-4px"}
          }, null, 2 /* CLASS */))
        : _createCommentVNode("v-if", true),
      (_ctx.data.component)
        ? (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.data.component), {
            key: 2,
            data: _ctx.data
          }, null, 8 /* PROPS */, ["data"]))
        : (_openBlock(), _createBlock(_Fragment, { key: 3 }, [
            _createTextVNode(_toDisplayString(_ctx.data.text), 1 /* TEXT */)
          ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)),
      (_ctx.hasMarker)
        ? (_openBlock(), _createBlock("span", {
            key: 4,
            class: _ctx.markerClassName
          }, "Â ", 2 /* CLASS */))
        : _createCommentVNode("v-if", true),
      (_ctx.data.contextmenu && _ctx.contextmenuVisible)
        ? (_openBlock(), _createBlock("div", {
            key: 5,
            style: _ctx.contextmenuStyle
          }, [
            (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.data.contextmenu), { data: _ctx.contextmenuData }, null, 8 /* PROPS */, ["data"]))
          ], 4 /* STYLE */))
        : _createCommentVNode("v-if", true)
    ], 42 /* CLASS, PROPS, HYDRATE_EVENTS */, ["draggable", "data-path"]),
    (_ctx.data.children)
      ? (_openBlock(), _createBlock("ul", {
          key: 0,
          role: "group",
          class: "tree-children"
        }, [
          _renderSlot(_ctx.$slots, "default", {}, () => [
            (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.data.children, (child, i) => {
              return (_openBlock(), _createBlock(_component_node, {
                key: i,
                data: child,
                last: i === _ctx.data.children.length - 1,
                checkbox: _ctx.checkbox,
                path: _ctx.geChildPath(i),
                draggable: _ctx.draggable,
                root: _ctx.root,
                zindex: _ctx.zindex,
                preid: _ctx.preid,
                onToggle: _cache[7] || (_cache[7] = $event => (_ctx.ontoggle($event))),
                onChange: _cache[8] || (_cache[8] = $event => (_ctx.onchange($event)))
              }, null, 8 /* PROPS */, ["data", "last", "checkbox", "path", "draggable", "root", "zindex", "preid"]))
            }), 128 /* KEYED_FRAGMENT */))
          ], {}, true)
        ]))
      : _createCommentVNode("v-if", true)
  ], 42 /* CLASS, PROPS, HYDRATE_EVENTS */, ["id"]))
}
export function treeTemplateHtml(_ctx, _cache) {
  const _component_node = _resolveComponent("node")

  return (_openBlock(), _createBlock("div", {
    class: _ctx.rootClassName,
    role: "tree"
  }, [
    _createVNode("ul", {
      class: _ctx.containerClassName,
      role: "group",
      onDragstart: _cache[3] || (_cache[3] = $event => (_ctx.ondragstart($event))),
      onDragend: _cache[4] || (_cache[4] = $event => (_ctx.ondragend($event))),
      onDragover: _cache[5] || (_cache[5] = $event => (_ctx.ondragover($event))),
      onDragenter: _cache[6] || (_cache[6] = $event => (_ctx.ondragenter($event))),
      onDragleave: _cache[7] || (_cache[7] = $event => (_ctx.ondragleave($event))),
      onDrop: _cache[8] || (_cache[8] = $event => (_ctx.ondrop($event)))
    }, [
      _renderSlot(_ctx.$slots, "default", {}, () => [
        (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.data, (child, i) => {
          return (_openBlock(), _createBlock(_component_node, {
            key: i,
            data: child,
            last: i === _ctx.data.length - 1,
            checkbox: _ctx.checkbox,
            path: [i],
            draggable: _ctx.draggable,
            root: _ctx.data,
            zindex: _ctx.zindex,
            preid: _ctx.preid,
            onToggle: _cache[1] || (_cache[1] = $event => (_ctx.ontoggle($event))),
            onChange: _cache[2] || (_cache[2] = $event => (_ctx.onchange($event)))
          }, null, 8 /* PROPS */, ["data", "last", "checkbox", "path", "draggable", "root", "zindex", "preid"]))
        }), 128 /* KEYED_FRAGMENT */))
      ], {}, true)
    ], 34 /* CLASS, HYDRATE_EVENTS */)
  ], 2 /* CLASS */))
}
/* eslint-enable */
// tslint:enable
